#  ________                ___ ___               .__
#  \______ \   _______  __/   |   \   ___________|  |   ____   ______
#   |    |  \_/ __ \  \/ /    ~    \_/ __ \_  __ \  | _/ __ \ /  ___/
#   |    `   \  ___/\   /\    Y    /\  ___/|  | \/  |_\  ___/ \___ \
#  /_______  /\___  >\_/  \___|_  /  \___  >__|  |____/\___  >____  >
#          \/     \/            \/       \/                \/     \/
# | Author: HerlesINC | Github: DevHerles | Email: herles.incalla@gmail.com |
snippet fclass "@freezed class" b
import 'package:freezed_annotation/freezed_annotation.dart';

part '`!v expand('%:t:r')`.freezed.dart';
part '`!v expand('%:t:r')`.g.dart';

@freezed
class ${1:Class} with _$$1 {
    @JsonSerializable(fieldRename: FieldRename.snake)
    factory $1({
        @Default('') String code,
        @Default('') String name,
    }) = _$1;
    factory $1.fromJson(Map<String, dynamic> json) => _$$1FromJson(json);
    $1._();
}

snippet rprovider "Create a Provider" b
final ${1:foo}Provider = Provider<${2:type}>((ref) {
    return ${3:bar};
});
endsnippet

snippet rproviderfamily "Create a Provider with family modifier" b
final ${1:foo}Provider = Provider.family<${2:type}, ${3:dynamic}>((ref, ${4:value}) {
    return ${5:bar};
});
endsnippet

snippet rstateprovider "Create a StateProvider" b
final ${1:foo}StateProvider = StateProvider<${2:type}>((ref) => ${3:bar});
endsnippet

snippet rstreamprovider "Create a StreamProvider" b
final ${1:foo}StreamProvider = StreamProvider<${2:type}>((ref) async* {
    return ${3:bar};
});
endsnippet

snippet rchangenotifier "Create a ChangeNotifier" b
class ${1:Foo}ChangeNotifier ${2:extends|with} ChangeNotifier {
		$1ChangeNotifier(){}
}
endsnippet

snippet rstatenotifier "Create a StateNotifier" b
class ${1:Foo}StateNotifier extends StateNotifier<${2:type}> {
    $1StateNotifier(): super(${3:foo:bar});
    return ${4:bar};
});
endsnippet

snippet rchangenotifierprovider "Create a ChangeNotifierProvider" b
final ${1:foo}ChangeNotifierProvider = ChangeNotifierProvider<${2:type}>((ref) {
    return $2();
});
endsnippet

snippet rchangenotifierproviderwithfamily "Create a ChangeNotifierProvider with Family modifier" b
final ${1:foo}ChangeNotifierProvider = ChangeNotifierProvider.family<${2:type}, ${3:dynamic}>((ref, ${value}) {
    return $2();
});
endsnippet

snippet rfutureprovider "Create a FutureProvider" b
final ${1:foo}FutureProvider = FutureProvider${2:<type>}((ref) async => ${3:bar});
endsnippet

snippet rfutureproviderwithfamily "Create a FutureProvider with Family modifier" b
final ${1:foo}FutureProvider = FutureProvider.family<${2:type}, ${3:dynamic}>((ref, ${value}) async {
    return ${4:bar};
});
endsnippet

snippet rconsumer "Create a consumer" b
Consumer(
    builder: (context, watch, child) {
    return ${1:Text("Consumer")};
    }
),
endsnippet

snippet rscopedprovider "Create a ScopedProvider" b
final ${1:foo}ScopedProvider = ScopedProvider<${2:type}>((ref) {
    return ${3:bar};
});
endsnippet

snippet hookconsumerwidget "Create a HookConsumerWidget" b
class ${1:MyApp} extends HookConsumerWidget {
    const $1({Key? key}) : super(key: key);

    @override
    Widget build(BuildContext context, WidgetRef ref) {
        final String ${2:value} = ref.watch(${3:fooProvider});
        return MaterialApp(
            home: Scaffold(
                appBar: AppBar(title: Text("$1")),
                body: Center(
                    child: Text($2),
                ),
            ),
        );
    }
}
endsnippet

snippet rliststatenotifier "Creata a StateNotifier list" b
class ${1:Foo}List extends StateNotifier<List<$1>> {
    $1List([List<$1>? state]) : super(state ?? []);
    void add($1 data) {
        state = [...state, data];
    }

    void edit($1 target) {
        state = [
            for(final record in state)
                if(record.id == target.id)
                    $1(
                        id: target.id,
                    )
                else
                    record,
        ];
    }

    void remove($1 target) {
        state = state.where((record) => record.id != target.id).toList();
    }
}
endsnippet

snippet fstatelessw "Create a Flutter StatelessWidget" b
class ${1:Foo}Page extends StatelessWidget {
		@override
		Widget build(BuildContext context) {
				return MaterialApp(
						debugShowCheckedModeBanner: false,
						theme: ThemeData(
								fontFamily: '${2:avenir}'
						),
      			home: ${3:Container()},
				);
		}
}
endsnippet

snippet fstatefulw "Create a Flutter StatefulWidget" b
class ${1:Foo}Page extends StatefulWidget {
		@override
		_$1PageState createState() => _$1PageState();
}
class _$1PageState extends State<$1Page> {
		@override
		Widget build(BuildContext context) {
				return Container();
		}
}
endsnippet
